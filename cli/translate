#!/bin/bash
#
#   Script to leverage Google Translation API from command line.


HLP='usage:  translate.py [options] (-t | --target) <LANG> [TEXT]

Options:

    --help, -h          Print this help message.
    --input, -i FILE    Read source text from FILE.
    --list, -l          List supported languages and corresponding codes.
    --output, -o FILE   Write target text to FILE.
    --source, -s LANG   Language or language code of source text. If not given,
                        the translator will try to determine the source language.
    --target, -t LANG   Language or Language code of the target text.'

LANGFILE='languages.txt'

# get supported languages
declare -a LANGUAGES
declare -a LANGCODES
let i=0
{ while read LINE; do
    LANGUAGES[i]="${LINE%%[[:space:]]*}"
    LANGCODES[i]="${LINE##*[[:space:]]}"
    let i++
done
}<languages.txt

let NUM_LANGS=$i

# make all opts short for getopts
for arg in "$@"; do
    shift
    case "$arg" in
        "--help")   set -- "$@" "-h" ;;
        "--input")  set -- "$@" "-i" ;;
        "--list")   set -- "$@" "-l" ;;
        "--output") set -- "$@" "-o" ;;
        "--source") set -- "$@" "-s" ;;
        "--target") set -- "$@" "-t" ;;
        *)          set -- "$@" "$arg"
    esac
done

# parse Options
OPTIND=1
while getopts "hi:lo:s:t:" opt; do
    case "$opt" in
        h)
            echo "$HLP"
            exit
            ;;
        i)
            if ! [ -r "$OPTARG" ]; then
                >&2 echo "Error: Unable to read from ${OPTARG}."
                exit 1
            fi
            TEXT="$(cat "$OPTARG")"
            ;;
        l)
            cat $LANGFILE
            exit
            ;;
        o)
            if ! [ -w "$OPTARG" ]; then
                >&2 echo "Error: Unable to write to ${OPTARG}."
                exit 1
            fi
            ;;
        s)
            for ((i=0; i < NUM_LANGS; i++)); do
                if [ $OPTARG == ${LANGUAGES[i]} ] || [ $OPTARG == ${LANGCODES[i]} ]; then
                    SRC=${LANGCODES[i]}
                fi
            done
            if [ -z $SRC ]; then
                >&2 printf "Error: %s is not a supported language.\n" "$OPTARG"
                exit 1
            fi
            ;;
        t)
            for ((i=0; i < NUM_LANGS; i++)); do
                if [[ "$OPTARG" == "${LANGUAGES[i]}" ]] || [[ "$OPTARG" == "${LANGCODES[i]}" ]]; then
                    TARGET=${LANGCODES[i]}
                fi
            done
            if [ -z $TARGET ]; then
                >&2 printf "Error: %s is not a supported language.\n" "$OPTARG"
                exit 1
            fi
            ;;
        ?)
            echo "$HLP"
            exit 1
    esac
done

shift "$((OPTIND -1))"

# target is required
if [ -z $TARGET ]; then
    >&2 echo "Error: No target language given."
    exit 1
fi

# quote text if reading from stdin
if [ -z $TEXT ]; then
    TEXT="$*"
fi

response=$(curl --silent --location --request POST 'https://translate.google.com/translate_a/single?client=at&dt=t&dt=ld&dt=qca&dt=rm&dt=bd&dj=1&hl=%25s&ie=UTF-8&oe=UTF-8&inputm=2&otf=2&iid=1dd3b944-fa62-4b55-b330-74909a99969e&' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'User-Agent: AndroidTranslate/5.3.0.RC02.130475354-53000263 5.1 phone TRANSLATE_OPM5_TEST_1' \
--data-urlencode sl="${SRC:-auto}" \
--data-urlencode tl="${TARGET}" \
--data-urlencode q="${TEXT}")

#TODO parse json response
exit
